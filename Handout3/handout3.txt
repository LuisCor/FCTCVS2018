import java.util.Random;
import java.util.concurrent.*;
import java.util.concurrent.locks.*;

/*@
    predicate ProbeInv(Probe p;) =
       p.value |-> ?v &*&
       p.sensor |-> ?s &*&
       s != null &*&
       SensorInv(s) &*&
       p.ran |-> ?r &*&
       r != null;
@*/


class Probe implements Runnable
{
   //@ predicate pre() = ProbeInv(this);
   //@ predicate post() = true;


    int value = 0;
   
    
    SensorInt sensor;
    Random ran;
    

    public Probe(SensorInt sensor)
    //@ requires sensor != null &*& SensorInv(sensor);
    //@ ensures pre();
    {
    	ran = new Random();
        this.sensor = sensor;
        this.value = ran.nextInt(sensor.max - sensor.min + 1) + sensor.min;
    }



    public void run()
    //@ requires pre();
    //@ ensures post();
    {
    
        while( true )
        //@ invariant ProbeInv(this);
        {
           // produce a new value every 2 seconds
           value = ran.nextInt(sensor.max - sensor.min + 1) + sensor.min;
           sensor.set(value);
           //sleep(2000);
           // Enter in a 2 second sleep, beware of thread sleeps in future
           // Requires change of javaspec to the TimeUnit class (check document)
           
        }
    }

}




import java.util.Random;
import java.util.concurrent.*;
import java.util.concurrent.locks.*;

/*@
    predicate SensorInv(SensorInt s;) =
       s.value |-> ?v &*&
       s.max |-> ?m &*&
       s.min |-> ?n &*&
       m > n
       //s.mon |-> ?l &*&
       //l != null
       ;
@*/


class SensorInt
{

    ////@ predicate pre() = SensorInv(this);
    ////@ predicate post() = true;

    int value;
    int min;
    int max;
    
    Thread th;
    ReentrantLock mon;
    
    static final int SAMPLING = 3;
    
    SensorInt(int min, int max) 
    //@ requires max > min;
    //@ ensures SensorInv(this);
    {
        this.min = min;
        this.max = max;
        this.value = min;
        this.mon = new ReentrantLock();
        //this.th = new Thread(new Probe(this));
        //this.th.start();
    }
    
    
    int getMax()
    //@ requires SensorInv(this);
    //@ ensures true;
    { 
        return this.max;
    }  
    
    int getMin() 
    //@ requires SensorInv(this);
    //@ ensures true;    
    { 
        return this.min;
    }  
    
    int get() 
    { 
        return this.value;
    }    
    
    void set(int value)
    //@ requires SensorInv(this);
    //@ ensures SensorInv(this); 
    {
        this.value = value;
    }
    
    public static void main(String args[]) throws InterruptedException
    {
        SensorInt s = new SensorInt(0,10);
        
        while(true)
        {
            // get and print a sample every 5 seconds
            System.out.println("Value: " + value);
            sleep(5000);
            
        }
    }
}

